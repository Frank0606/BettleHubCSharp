// <auto-generated />
using BettleHubCsharp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BettleHubCsharp.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("BettleHubCsharp.Models.Biologo", b =>
                {
                    b.Property<int>("Id_biologo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id_biologo"));

                    b.Property<string>("Contrasena_biologo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Correo_biologo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Edad_biologo")
                        .HasColumnType("int");

                    b.Property<string>("Nombre_biologo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Protegida")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Telefono_biologo")
                        .HasColumnType("int");

                    b.Property<string>("Usuario_biologo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id_biologo");

                    b.ToTable("Biologo");

                    b.HasData(
                        new
                        {
                            Id_biologo = 1,
                            Contrasena_biologo = "1234",
                            Correo_biologo = "Correo1",
                            Edad_biologo = 19,
                            Nombre_biologo = "Nombre1",
                            Protegida = true,
                            Telefono_biologo = 1,
                            Usuario_biologo = "Usuario1"
                        },
                        new
                        {
                            Id_biologo = 2,
                            Contrasena_biologo = "1234",
                            Correo_biologo = "Correo2",
                            Edad_biologo = 20,
                            Nombre_biologo = "Nombre2",
                            Protegida = true,
                            Telefono_biologo = 2,
                            Usuario_biologo = "Usuario2"
                        },
                        new
                        {
                            Id_biologo = 3,
                            Contrasena_biologo = "1234",
                            Correo_biologo = "Correo3",
                            Edad_biologo = 18,
                            Nombre_biologo = "Nombre3",
                            Protegida = true,
                            Telefono_biologo = 3,
                            Usuario_biologo = "Usuario3"
                        },
                        new
                        {
                            Id_biologo = 4,
                            Contrasena_biologo = "1234",
                            Correo_biologo = "Correo4",
                            Edad_biologo = 23,
                            Nombre_biologo = "Nombre4",
                            Protegida = true,
                            Telefono_biologo = 4,
                            Usuario_biologo = "Usuario4"
                        });
                });

            modelBuilder.Entity("BettleHubCsharp.Models.Escarabajo", b =>
                {
                    b.Property<int>("EscarabajoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EscarabajoId"));

                    b.Property<int>("Anio")
                        .HasColumnType("int");

                    b.Property<string>("Poster")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Sinopsis")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("EscarabajoId");

                    b.ToTable("Escarabajo");
                });

            modelBuilder.Entity("BiologoEscarabajo", b =>
                {
                    b.Property<int>("BiologosId_biologo")
                        .HasColumnType("int");

                    b.Property<int>("EscarabajosEscarabajoId")
                        .HasColumnType("int");

                    b.HasKey("BiologosId_biologo", "EscarabajosEscarabajoId");

                    b.HasIndex("EscarabajosEscarabajoId");

                    b.ToTable("BiologoEscarabajo");
                });

            modelBuilder.Entity("BiologoEscarabajo", b =>
                {
                    b.HasOne("BettleHubCsharp.Models.Biologo", null)
                        .WithMany()
                        .HasForeignKey("BiologosId_biologo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BettleHubCsharp.Models.Escarabajo", null)
                        .WithMany()
                        .HasForeignKey("EscarabajosEscarabajoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
